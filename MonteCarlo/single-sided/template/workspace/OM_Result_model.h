/* Simulation code for Outfall generated by the OpenModelica Compiler OpenModelica 1.12.0. */
#if !defined(OM_Result__MODEL_H)
#define OM_Result__MODEL_H
#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#include <string.h>

#include "OM_Result_functions.h"

#define Modelica_Blocks_Tables_Internal_getNextTimeEvent_index 0
#define Modelica_Blocks_Tables_Internal_getTimeTableTmax_index 1
#define Modelica_Blocks_Tables_Internal_getTimeTableTmin_index 2
#define Modelica_Blocks_Tables_Internal_getTimeTableValue_index 3
#define Modelica_Blocks_Types_ExternalCombiTimeTable_constructor_index 4
#define Modelica_Blocks_Types_ExternalCombiTimeTable_destructor_index 5
#define Modelica_Math_Special_erfInv_index 6
#define Modelica_Math_Special_Internal_erfInvUtil_index 7
#define Modelica_Math_Special_Internal_polyEval_index 8
#define Modelica_Utilities_Strings_isEmpty_index 9
#define Modelica_Utilities_Strings_length_index 10
#define Modelica_Utilities_Strings_Advanced_skipWhiteSpace_index 11
#define Outfall_invNormal_index 12
#define Outfall_invUniform_index 13
#define Outfall_invWeibull_index 14

extern void OM_Result_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
extern void OM_Result_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void OM_Result_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int OM_Result_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int OM_Result_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int OM_Result_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int OM_Result_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int OM_Result_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int OM_Result_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int OM_Result_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int OM_Result_checkForAsserts(DATA *data, threadData_t *threadData);
extern int OM_Result_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int OM_Result_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int OM_Result_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int OM_Result_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* OM_Result_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* OM_Result_relationDescription(int i);
extern void OM_Result_function_initSample(DATA *data, threadData_t *threadData);
extern int OM_Result_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int OM_Result_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int OM_Result_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int OM_Result_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int OM_Result_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int OM_Result_functionJacG_column(void* data, threadData_t *threadData);
extern int OM_Result_functionJacA_column(void* data, threadData_t *threadData);
extern int OM_Result_functionJacB_column(void* data, threadData_t *threadData);
extern int OM_Result_functionJacC_column(void* data, threadData_t *threadData);
extern int OM_Result_functionJacD_column(void* data, threadData_t *threadData);
extern const char* OM_Result_linear_model_frame(void);
extern const char* OM_Result_linear_model_datarecovery_frame(void);
extern int OM_Result_mayer(DATA* data, modelica_real** res, short *);
extern int OM_Result_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int OM_Result_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int OM_Result_setInputData(DATA *data, const modelica_boolean file);
extern int OM_Result_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void OM_Result_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void OM_Result_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int OM_Result_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void OM_Result_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void OM_Result_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int OM_Result_inputNames(DATA* data, char ** names);
extern int OM_Result_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int OM_Result_functionLocalKnownVars(DATA*, threadData_t*);
extern int OM_Result_symbolicInlineSystem(DATA*, threadData_t*);

#include "OM_Result_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#endif

